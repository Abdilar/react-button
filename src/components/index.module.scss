$button-color-muted: #444;
$button-color-white: #fff;
$button-circle-size: 25px;
$darken-amount: 8%;
$disabled-background: #f5f5f5;
$disabled-border-color: #dddddd;
$disabled-color: #adadad;
$transition: .1s ease-in-out;

$button-colors: (
  default: transparent,
  primary: #1e87f0,
  secondary: #222,
  success: #32d296,
  warning: #faa05a,
  danger: #f0506e
);

$button-hover-colors: (
  default: #f5f5f5,
  primary: #ebf4fe,
  secondary: #e8e8e8,
  success: #eefbf5,
  warning: #fff6ee,
  danger: #fef2f4
);

$button-sizes: (
  small: 30px,
  medium: 40px,
  large: 50px,
  xlarge: 55px
);

$button-rounds: (
  empty: 0,
  low: 4px,
  more: 8px,
  fully: 1000px
);

$button-variant: (
  contained
  outlined
  text
);

@mixin getContainedButtonStyle($color) {
  background-color: map_get($button-colors, $color);
  @if ($color == default) {
    color: $button-color-muted;
    border: 1px solid lighten($button-color-muted, 60%);
  }
  @else if ($color != default) {
    color: $button-color-white;
    border: 1px solid map_get($button-colors, $color);
  }
  &:hover {
    @if ($color != default) {
      background-color: darken(map_get($button-colors, $color), $darken-amount);
      color: $button-color-white;
    }
    @else if ($color == default) {
      border-color: darken(lighten($button-color-muted, 50%), $darken-amount);
      color: $button-color-muted;
    }
    text-decoration: none;
  }
}

@mixin getButtonStyle($color, $isText) {
  background-color: transparent;
  @if ($color == default) {
    border: 1px solid;
    color: $button-color-muted;

    @if ($isText == true) {
      border-color: transparent;
    } @else {
      border-color: lighten($button-color-muted, 60%);
    }
  }
  @else if ($color != default) {
    border: 1px solid;
    color: map-get($button-colors, $color);

    @if ($isText == true) {
      border-color: transparent;
    } @else {
      border-color: map-get($button-colors, $color);
    }
  }
  &:hover {
    background-color: map_get($button-hover-colors, $color);
    text-decoration: none;
    @if ($color == default) {
      color: $button-color-muted;
    }
    @else if ($color != default) {
      color: map-get($button-colors, $color);
    }
  }
}

.react_button {
  align-items: center;
  cursor: pointer;
  display: inline-flex;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  justify-content: center;
  outline: none;
  overflow: hidden;
  text-decoration: none;
  transition: $transition;
  transition-property: background-color, border-color;
  user-select: none;

  @each $color in map_keys($button-colors) {
    &_contained_#{$color} {
      @extend .react_button;
      @include getContainedButtonStyle($color);
    }

    &_outlined_#{$color} {
      @extend .react_button;
      @include getButtonStyle($color, false);
    }

    &_text_#{$color} {
      @extend .react_button;
      @include getButtonStyle($color, true);
    }
  }

  @each $size in map-keys($button-sizes) {
    &_#{$size} {
      min-height: map-get($button-sizes, $size);
      min-width: 30px + map-get($button-sizes, $size);
      padding-left: map-get($button-sizes, $size) - 15px;
      padding-right: map-get($button-sizes, $size) - 15px;
    }

    &_icon_#{$size} {
      height: map-get($button-sizes, $size);
      width: map-get($button-sizes, $size);
    }
  }

  @each $round in map-keys($button-rounds) {
    &_round__#{$round} {
      border-radius: map-get($button-rounds, $round);
    }
  }

  &_icon {
    align-items: center;
    box-sizing: border-box;
    display: inline-flex;
    justify-content: center;
    min-height: initial;
    min-width: initial;
    overflow: hidden;
    padding: 4px;
  }

  &_deactivate {
    cursor: default;
    pointer-events: none;
  }

  &__disabled {
    color: $disabled-color;
    cursor: default;

    &_contained {
      @extend .react_button__disabled;
      background-color: $disabled-background;
      border-color: $disabled-border-color;

      &:hover {
        @extend .react_button__disabled_contained;
      }
    }

    &_outlined {
      @extend .react_button__disabled;
      background-color: transparent;
      border-color: $disabled-border-color;

      &:hover {
        @extend .react_button__disabled_outlined;
      }
    }

    &_text {
      @extend .react_button__disabled;
      background-color: transparent;
      border-color: transparent;

      &:hover {
        @extend .react_button__disabled_text;
      }
    }
  }
}

.react_cursor {
  &_default {
    cursor: default;
  }
}

.react_display_inline {
  &_block {
    display: inline-block;
  }

  &_flex {
    display: inline-flex;
  }
}

.react_content {
  line-height: initial;
  &__hidden {
    visibility: hidden;
  }

  &__none {
    display: none;
  }
}

.react_link {
  box-sizing: border-box;
  &[aria-disabled="true"] {
    pointer-events: none;
  }
}

@keyframes pulse {
  0% {
    -webkit-transform: scaleX(1);
    transform: scaleX(1)
  }

  50% {
    -webkit-transform: scale3d(1.05,1.05,1.05);
    transform: scale3d(1.05,1.05,1.05)
  }

  to {
    -webkit-transform: scaleX(1);
    transform: scaleX(1)
  }
}

.react_animate__pulse {
  -webkit-animation-name: pulse;
  animation-name: pulse;
  -webkit-animation-timing-function: ease-in-out;
  animation-timing-function: ease-in-out;
  animation-duration: .3s;
}
